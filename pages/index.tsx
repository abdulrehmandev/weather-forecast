import Head from 'next/head'
import { useState } from 'react'
import { WEATHER_API_URL, weather_api_key } from "../config";
import PrimaryHeader from '@/components/PrimaryHeader'
import Footer from '@/components/Footer'
import Search from '@/components/Search'
import WeatherWidget from '@/components/WeatherWidget'
import Forecast from '@/components/Forecast'


const splitDate = (date: Date): string => {
  let dateSplit = date.toDateString().split(' ');
  return `${dateSplit[0]}, ${dateSplit[2]}`
}

export default function Home() {
  const [currentWeather, setCurrentWeather] = useState<any>(null);
  const [forecast, setForecast] = useState<any>(null);

  function _onSearch(searchInput: any) {
    const [lat, lon] = searchInput.value.split(' ');

    fetch(`${WEATHER_API_URL}/weather?lat=${lat}&lon=${lon}&appid=${weather_api_key}&units=metric`)
      .then(res => res.json())
      .then(res => {
        const _data = {
          location: searchInput.label,
          temp: Math.round(res.main.temp),
          feels_like: Math.round(res.main.feels_like),
          visibility: res.visibility,
          main: res.weather[0].main,
          icon: res.weather[0].icon,
          humidity: res.main.humidity,
          wind: res.wind.speed,
          sunrise: res.sys.sunrise,
          sunset: res.sys.sunset,
        };

        setCurrentWeather(_data);
      })
      .catch(err => console.error(err));

    fetch(`${WEATHER_API_URL}/forecast?lat=${lat}&lon=${lon}&appid=${weather_api_key}&units=metric`)
      .then(res => res.json())
      .then(res => {
        let _data: object[] = [];
        let _tempDay: number;

        res.list.forEach((day: any) => {
          const time = new Date(day.dt * 1000);

          if (time.getDate() === _tempDay) {
            return;
          }

          _data.push({
            day: splitDate(time),
            temp: Math.round(day.main.temp),
            min: Math.round(day.main.temp_min),
            icon: day.weather[0].icon,
            main: day.weather[0].main,
          })

          _tempDay = time.getDate();
        });
        setForecast(_data);
      })
      .catch(err => console.error(err));
  }


  return (
    <>
      <Head>
        <title>Weather Forecast App</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <div className="container">
        <PrimaryHeader />
        <Search onSearch={_onSearch} />
        {!currentWeather && (
          <p className="help-text">Search city to get weather forecast.</p>
        )}
        {currentWeather && <WeatherWidget data={currentWeather} />}
        {forecast && <Forecast data={forecast} />}
        <Footer />
      </div>
    </>
  )
}
